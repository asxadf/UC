clc;
clear;
close all;
%
%% ------------------------------ Setting ------------------------------ %%
Date_Dispatch = '2020-08-13';
%
%% ------------------------------ Loading ------------------------------ %%
[Num_Gen,...
 Num_Branch,...
 Num_Bus,...
 Num_Bus_Load,...
 Num_Hour,...
 Num_RES,...
 Num_Seg,...
 Gen_Capacity,...
 Gen_Price,...
 Branch,...
 Load_System_DAF_All,...
 Load_System_DAF_Dis,...
 Load_Bus_DAF_All,...
 Load_Bus_DAF_Dis,...
 RES_SUM_DAF_All,...
 RES_SUM_DAF_Dis,...
 RES_Farm_DAF_All,...
 RES_Farm_DAF_Dis,...
 R_System_Req_All,...
 R_System_Req_Dis,...
 R_H_Req_All,...
 R_H_Req_Dis,...
 R_C_Req_All,...
 R_C_Req_Dis,...
 PTDF_Gen,...
 PTDF_Load,...
 PTDF_RES,...
 GS_Price,...
 LS_Price,...
 BS_Price,...
 Date_All_List,...
 Day,...
 Unit_Quick,...
 Unit_Thermal,...
 Gen_Price_PWL_Intercept,...
 Gen_Price_PWL_Slope,...
 Seg_Range,...
 BK_Point_Gen,...
 BK_Point_Cost] = Database_UC_Test(Date_Dispatch);
%
%% ------------------------------ Decision ----------------------------- %%
Var_UC_I    = binvar(Num_Gen, Num_Hour);
Var_UC_I_SU = binvar(Num_Gen, Num_Hour);
Var_UC_I_SD = binvar(Num_Gen, Num_Hour);
Var_UC_I_RC = binvar(Num_Gen, Num_Hour);
Var_UC_P      = sdpvar(Num_Gen, Num_Hour);
Var_UC_P_Cost = sdpvar(Num_Gen, Num_Hour);
Var_UC_W      = sdpvar(Num_Hour,Num_RES);
Var_UC_R_H    = sdpvar(Num_Gen, Num_Hour);
Var_UC_R_C    = sdpvar(Num_Gen, Num_Hour);
%
%% ----------------------------- Objective ----------------------------- %%
Cost_UC_SU   = Gen_Price(:, 5)'*sum(Var_UC_I_SU, 2);
Cost_UC_P    = sum(Var_UC_P_Cost(:));
Cost_SYS_EXP = Cost_UC_SU + Cost_UC_P;
%
%% ---------------------------- Constraint ----------------------------- %%
Con = [];
% Generation limit
for t = 1:Num_Hour
    Con = Con...
        + [   Var_UC_P(:, t) - Var_UC_R_H(:, t) >= Gen_Capacity(:, 4).* Var_UC_I(:, t) ];
    Con = Con...
        + [   Var_UC_P(:, t) + Var_UC_R_H(:, t) <= Gen_Capacity(:, 3).* Var_UC_I(:, t) ];
end
%
% PWL
for i = 1:Num_Gen
    for t = 1:Num_Hour
        for k = 1:Num_Seg
            Con = Con...
                + [ Var_UC_P_Cost(i, t) >= Gen_Price_PWL_Intercept(i, k)*Var_UC_I(i, t)...
                                         + Gen_Price_PWL_Slope(i, k)*Var_UC_P(i, t)];
        end
    end
end
%
% Hot reserve limit
for t = 1:Num_Hour
    Con = Con...
        + [ 0 <= Var_UC_R_H(:, t) <= Gen_Capacity(:, 11).*Var_UC_I(:, t) ];
end
%
% Cool reserve limit
for t = 1:Num_Hour
    Con = Con...
        + [ Var_UC_R_C(:, t) >= Gen_Capacity(:, 4).*Var_UC_I_RC(:, t) ];
    Con = Con...
        + [ Var_UC_R_C(:, t) <= Gen_Capacity(:,12).*Var_UC_I_RC(:, t) ];
end
%
% Cool reserve flag
Con = Con + [ Var_UC_I_RC + Var_UC_I <= 1 ];
%
% Logical relationship
for t = 1:Num_Hour
    if t == 1
        Con = Con...
            + [ Var_UC_I_SU(:, t) - Var_UC_I_SD(:, t) == Var_UC_I(:, t) ];
    end
    if t >= 2
        Con = Con...
            + [ Var_UC_I_SU(:, t) - Var_UC_I_SD(:, t) == Var_UC_I(:, t) - Var_UC_I(:, t-1) ];
    end
end
%
% Min ON/OFF
for i = 1:Num_Gen
    % ON
    for t = Gen_Capacity(i, 5):Num_Hour
        Con = Con + [ sum(Var_UC_I_SU(i, t-Gen_Capacity(i, 5)+1:t)) <= Var_UC_I(i, t) ];
    end
    % OFF
    for t = Gen_Capacity(i, 6):Num_Hour
        Con = Con + [ sum(Var_UC_I_SD(i, t-Gen_Capacity(i, 6)+1:t)) <= 1 - Var_UC_I(i, t) ];
    end
end
%
% Ramping limit
for t = 2:Num_Hour
    Con = Con...
        + [   Var_UC_P(:, t) - Var_UC_P(:, t-1)...
           <= Gen_Capacity(:, 7).*     Var_UC_I(:, t-1)...
            + Gen_Capacity(:, 9).*(    Var_UC_I(:, t)...
                                     - Var_UC_I(:, t-1))...
            + Gen_Capacity(:, 3).*(1 - Var_UC_I(:, t)) ];
    Con = Con...
        + [   Var_UC_P(:, t-1) - Var_UC_P(:, t)...
           <= Gen_Capacity(:, 8).*     Var_UC_I(:, t)...
            + Gen_Capacity(:,10).*(    Var_UC_I(:, t-1)...
                                     - Var_UC_I(:, t))...
            + Gen_Capacity(:, 3).*(1 - Var_UC_I(:, t-1)) ];
end
%
% RES curtailment limit
Con = Con + [ 0 <= Var_UC_W <= RES_Farm_DAF_Dis ];
%
% Thermal untis has not cool reserve
for i = Unit_Thermal
    Con = Con + [ Var_UC_I_RC(i, :) == 0];
end
%
% Power balance
for t = 1:Num_Hour
    Con = Con...
        + [   sum(Var_UC_P(:, t))...
            + sum(Var_UC_W(t, :))...
           == sum(Load_Bus_DAF_Dis(t, :)) ];
end
%
% Transmission limit
for t = 1:Num_Hour
    Con = Con...
        + [ - Branch(:, 5)...
           <= PTDF_Gen*Var_UC_P(:, t)...
            + PTDF_RES*Var_UC_W(t, :)'...
            - PTDF_Load*Load_Bus_DAF_Dis(t, :)'...
           <= Branch(:, 5) ];
end
%
% Reserve requirement (>= or ==)
Con = Con + [ sum(Var_UC_R_H)' >= R_H_Req_Dis ];
Con = Con + [ sum(Var_UC_R_H)' + sum(Var_UC_R_C)' >= R_H_Req_Dis + R_C_Req_Dis];
%
%% ------------------------------ Solve it ----------------------------- %%
disp(['Solving UC for ', datestr(Date_Dispatch)]);
ops = sdpsettings('solver', 'gurobi');
sol = optimize(Con, Cost_SYS_EXP, ops);
%
%% ------------------------ Value and Round it ------------------------- %%
% Round them for avoiding numerical problems
Var_UC_I    = round(value(Var_UC_I));
Var_UC_I_SU = round(value(Var_UC_I_SU));
Var_UC_I_SD = round(value(Var_UC_I_SD));
Var_UC_I_RC = round(value(Var_UC_I_RC));

Var_UC_P      = round(value(Var_UC_P), 4);
Var_UC_P_Cost = round(value(Var_UC_P_Cost), 4);
Var_UC_W      = round(value(Var_UC_W), 4);
Var_UC_R_H    = round(value(Var_UC_R_H), 4);
Var_UC_R_C    = round(value(Var_UC_R_C), 4);
%
% Cost
Cost_UC_SU   = value(Cost_UC_SU);
Cost_UC_P    = value(Cost_UC_P);
Cost_SYS_EXP = value(Cost_SYS_EXP);
%
%% --------------------------- Check network --------------------------- %%
Trans_Power = zeros(Num_Branch, Num_Hour);
Trans_Rate  = zeros(Num_Branch, Num_Hour);
for t = 1:Num_Hour
    Trans_Power(:, t) = PTDF_Gen*Var_UC_P(:, t)...
                      + PTDF_RES*Var_UC_W(t, :)'...
                      - PTDF_Load*Load_Bus_DAF_Dis(t, :)' ;
end
for i = 1:Num_Branch
    for t = 1:Num_Hour
        Trans_Rate(i, t) = round(Trans_Power(i, t)/(Branch(i, 5)), 2);
    end   
end
Trans_Rate_max_avr = zeros(Num_Branch, 2);
for i = 1:Num_Branch
    Trans_Rate_max_avr(i, 1) = max(abs(Trans_Rate(i, :))); 
    Trans_Rate_max_avr(i, 2) = sum(abs(Trans_Rate(i, :)))/Num_Hour; 
end
%